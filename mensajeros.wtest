import mensajeros.*
import destinos.*
import mensajeria.*


describe "test primera parte" {

  test "Roberto puede llevar un paquete que está pago en un camión que tiene un acoplado" {
    roberto.vehiculo(camion)
    paquete.pagarPaquete(50)
    assert.that(paquete.puedeEntregarse(puenteDeBrooklyn, roberto))
  }

  test "Neo con crédito no puede llevar un paquete que no está pago a la matrix" {
    assert.notThat(paquete.puedeEntregarse(matrix, neo))
  }
}

describe "test segunda parte" {
  test "Contratar a un mensajero" {
    mensajeria.contratar(neo)
    assert.equals(1, mensajeria.cantidadDeMensajeros())
  }

  test "Despedir a un mensajero" {
    mensajeria.despedir(neo)
    assert.equals(0, mensajeria.cantidadDeMensajeros())
  }

  test "Despedir a todos los mensajeros" {
    mensajeria.despedirATodos()
    assert.equals(0, mensajeria.cantidadDeMensajeros())
  }

  test "Analizar si la mensajería es grande" {
    mensajeria.contratar(neo)
    mensajeria.contratar(roberto)
    mensajeria.contratar(chuckNorris)
    assert.that(mensajeria.esGrande())
  }

  test "El paquete puede ser entregado por el primer empleado de la empresa" {
    mensajeria.contratar(chuckNorris)
    paquete.pagarPaquete(50)
    assert.that(mensajeria.puedeSerEntregadoPorElPrimero(paquete, puenteDeBrooklyn))
  }

  test "Peso del último mensajero de la empresa" {
    mensajeria.contratar(chuckNorris)
    mensajeria.contratar(neo)
    mensajeria.contratar(roberto)
    assert.that(mensajeria.pesoUltimoMensajero() >= 0)
  }
}

describe "test tercera parte" {
  test "Al menos uno de los mensajeros puede entregar el paquete" {
    mensajeria.contratar(neo)
    mensajeria.contratar(roberto)
    mensajeria.contratar(chuckNorris)
    paquete.pagarPaquete(50)
    assert.that(mensajeria.puedeSerEntregadoAlMenosPorUno(paquete, puenteDeBrooklyn) or mensajeria.puedeSerEntregadoAlMenosPorUno(paquete, matrix))
  }

  test "Los mensajeros que pueden llevar el paquetito son 3" {
    mensajeria.contratar(neo)
    mensajeria.contratar(roberto)
    mensajeria.contratar(chuckNorris)
    paquete.pagarPaquete(50)
    assert.that(mensajeria.cantidadDeMensajerosQuePuedenLlevar(paquete, puenteDeBrooklyn).size() >= 3)
  }

  test "La mensajería tiene sobrepeso" {
    mensajeria.contratar(neo)
    mensajeria.contratar(roberto)
    camion.agregarAcoplado(3)
    mensajeria.contratar(chuckNorris)
    assert.that(mensajeria.peso() > 500)
  }

  test "Hacer que la empresa de mensajería envíe un paquete" {
    mensajeria.contratar(neo)
    mensajeria.contratar(chuckNorris)
    mensajeria.enviarPaquete(paquetito, matrix)
    assert.equals([neo, chuckNorris], mensajeria.cantidadDeMensajerosQuePuedenLlevar(paquetito, matrix))
  }

  test "El total facturado es 0" {
    mensajeria.contratar(neo)
    mensajeria.contratar(chuckNorris)
    mensajeria.enviarPaquete(paquetito, matrix)
    assert.equals(0, mensajeria.totalFacturado())
  }
}