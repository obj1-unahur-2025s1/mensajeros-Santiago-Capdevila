import destinos.*
import mensajeros.*
import vehiculos.*
import paquetes.*
import empresa.*

describe "primera parte" {
  test "Roberto lleva un paquete a el puente de Brooklyn que está pago en un camión que tiene un acoplado" {
    roberto.cambiarTransporte(camion)
    camion.agregarAcoplado(1)
    paquete.pagarPaquete()
    assert.that(puenteDeBrooklyn.puedePasar(roberto) && paquete.estaPago())
  }

  test "Neo no puede llevar un paquete que no está pago a la matrix" {
    assert.notThat(paquete.sePuedeEntregar(neo))
  }
}

describe "segunda parte" {
  
  test "La empresa contrata a Neo" {
    assert.that(empresa.mensajeros().contains(neo))
  }

  test "La empresa despide a roberto" {
    empresa.contratarMensajero(roberto)
    empresa.despedirMensajero(roberto)
    assert.notThat(empresa.mensajeros().contains(roberto))
  }

  test "La mensajería no es grande" {
    empresa.contratarMensajero(neo)
    assert.notThat(empresa.esGrande())
  }

  test "La empresa despide a todos los mensajeros" {
    empresa.contratarMensajero(roberto)
    empresa.contratarMensajero(chuckNorris)
    empresa.contratarMensajero(neo)
    empresa.despedirAMensajeros()
    assert.equals(0, empresa.mensajeros().size())
  }

  test "El primer mensajero de la empresa puede entregar el paquete a el puente de Brooklyn" {
    empresa.contratarMensajero(roberto)
    empresa.contratarMensajero(chuckNorris)
    empresa.contratarMensajero(neo)
    paquete.pagarPaquete()
    assert.that(empresa.puedeSerEntregadoPorElPrimero())
  }

  test "El último mensajero contratado por la empresa tiene un peso mayor a 500kg" {
    empresa.contratarMensajero(chuckNorris)
    empresa.contratarMensajero(neo)
    empresa.contratarMensajero(roberto)
    roberto.cambiarTransporte(camion)
    camion.agregarAcoplado(3)
    assert.that(empresa.pesoUltimoMensajero() > 500)
  }
}

describe "tercer parte" {
  test "description" {
    
  }
}
